// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CertificateAuthorityActivationSpec defines the desired state of CertificateAuthorityActivation.
type CertificateAuthorityActivationSpec struct {

	// +kubebuilder:validation:Required
	Certificate *ackv1alpha1.SecretKeyReference `json:"certificate"`
	// The Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority
	// (https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html).
	// This must be of the form:
	//
	// arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
	CertificateAuthorityARN *string                                  `json:"certificateAuthorityARN,omitempty"`
	CertificateAuthorityRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"certificateAuthorityRef,omitempty"`
	// A PEM-encoded file that contains all of your certificates, other than the
	// certificate you're importing, chaining up to your root CA. Your Amazon Web
	// Services Private CA-hosted or on-premises root certificate is the last in
	// the chain, and each certificate in the chain signs the one preceding.
	//
	// This parameter must be supplied when you import a subordinate CA. When you
	// import a root CA, there is no chain.
	CertificateChain []byte `json:"certificateChain,omitempty"`
	// Contains information to enable Online Certificate Status Protocol (OCSP)
	// support, to enable a certificate revocation list (CRL), to enable both, or
	// to enable neither. If this parameter is not supplied, existing capibilites
	// remain unchanged. For more information, see the OcspConfiguration (https://docs.aws.amazon.com/privateca/latest/APIReference/API_OcspConfiguration.html)
	// and CrlConfiguration (https://docs.aws.amazon.com/privateca/latest/APIReference/API_CrlConfiguration.html)
	// types.
	//
	// The following requirements apply to revocation configurations.
	//
	//   - A configuration disabling CRLs or OCSP must contain only the Enabled=False
	//     parameter, and will fail if other parameters such as CustomCname or ExpirationInDays
	//     are included.
	//
	//   - In a CRL configuration, the S3BucketName parameter must conform to Amazon
	//     S3 bucket naming rules (https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
	//
	//   - A configuration containing a custom Canonical Name (CNAME) parameter
	//     for CRLs or OCSP must conform to RFC2396 (https://www.ietf.org/rfc/rfc2396.txt)
	//     restrictions on the use of special characters in a CNAME.
	//
	//   - In a CRL or OCSP configuration, the value of a CNAME parameter must
	//     not include a protocol prefix such as "http://" or "https://".
	RevocationConfiguration *RevocationConfiguration `json:"revocationConfiguration,omitempty"`
	Status                  *string                  `json:"status,omitempty"`
}

// CertificateAuthorityActivationStatus defines the observed state of CertificateAuthorityActivation
type CertificateAuthorityActivationStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
}

// CertificateAuthorityActivation is the Schema for the CertificateAuthorityActivations API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type CertificateAuthorityActivation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateAuthorityActivationSpec   `json:"spec,omitempty"`
	Status            CertificateAuthorityActivationStatus `json:"status,omitempty"`
}

// CertificateAuthorityActivationList contains a list of CertificateAuthorityActivation
// +kubebuilder:object:root=true
type CertificateAuthorityActivationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateAuthorityActivation `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CertificateAuthorityActivation{}, &CertificateAuthorityActivationList{})
}
