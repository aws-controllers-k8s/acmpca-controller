// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	"github.com/aws/aws-sdk-go/aws"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)

// Contains X.509 certificate information to be placed in an issued certificate.
// An APIPassthrough or APICSRPassthrough template variant must be selected,
// or else this parameter is ignored.
//
// If conflicting or duplicate certificate information is supplied from other
// sources, Amazon Web Services Private CA applies order of operation rules
// (https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html#template-order-of-operations)
// to determine what information is used.
type APIPassthrough struct {
	// Contains X.509 extension information for a certificate.
	Extensions *Extensions `json:"extensions,omitempty"`
	// Contains information about the certificate subject. The Subject field in
	// the certificate identifies the entity that owns or controls the public key
	// in the certificate. The entity can be a user, computer, device, or service.
	// The Subject must contain an X.500 distinguished name (DN). A DN is a sequence
	// of relative distinguished names (RDNs). The RDNs are separated by commas
	// in the certificate.
	Subject *ASN1Subject `json:"subject,omitempty"`
}

// Contains information about the certificate subject. The Subject field in
// the certificate identifies the entity that owns or controls the public key
// in the certificate. The entity can be a user, computer, device, or service.
// The Subject must contain an X.500 distinguished name (DN). A DN is a sequence
// of relative distinguished names (RDNs). The RDNs are separated by commas
// in the certificate.
type ASN1Subject struct {
	CommonName                 *string            `json:"commonName,omitempty"`
	Country                    *string            `json:"country,omitempty"`
	CustomAttributes           []*CustomAttribute `json:"customAttributes,omitempty"`
	DistinguishedNameQualifier *string            `json:"distinguishedNameQualifier,omitempty"`
	GenerationQualifier        *string            `json:"generationQualifier,omitempty"`
	GivenName                  *string            `json:"givenName,omitempty"`
	Initials                   *string            `json:"initials,omitempty"`
	Locality                   *string            `json:"locality,omitempty"`
	Organization               *string            `json:"organization,omitempty"`
	OrganizationalUnit         *string            `json:"organizationalUnit,omitempty"`
	Pseudonym                  *string            `json:"pseudonym,omitempty"`
	SerialNumber               *string            `json:"serialNumber,omitempty"`
	State                      *string            `json:"state,omitempty"`
	Surname                    *string            `json:"surname,omitempty"`
	Title                      *string            `json:"title,omitempty"`
}

// Provides access information used by the authorityInfoAccess and subjectInfoAccess
// extensions described in RFC 5280 (https://datatracker.ietf.org/doc/html/rfc5280).
type AccessDescription struct {
	// Describes an ASN.1 X.400 GeneralName as defined in RFC 5280 (https://datatracker.ietf.org/doc/html/rfc5280).
	// Only one of the following naming options should be provided. Providing more
	// than one option results in an InvalidArgsException error.
	AccessLocation *GeneralName `json:"accessLocation,omitempty"`
	// Describes the type and format of extension access. Only one of CustomObjectIdentifier
	// or AccessMethodType may be provided. Providing both results in InvalidArgsException.
	AccessMethod *AccessMethod `json:"accessMethod,omitempty"`
}

// Describes the type and format of extension access. Only one of CustomObjectIdentifier
// or AccessMethodType may be provided. Providing both results in InvalidArgsException.
type AccessMethod struct {
	AccessMethodType       *string `json:"accessMethodType,omitempty"`
	CustomObjectIdentifier *string `json:"customObjectIdentifier,omitempty"`
}

// Contains configuration information for a certificate revocation list (CRL).
// Your private certificate authority (CA) creates base CRLs. Delta CRLs are
// not supported. You can enable CRLs for your new or an existing private CA
// by setting the Enabled parameter to true. Your private CA writes CRLs to
// an S3 bucket that you specify in the S3BucketName parameter. You can hide
// the name of your bucket by specifying a value for the CustomCname parameter.
// Your private CA copies the CNAME or the S3 bucket name to the CRL Distribution
// Points extension of each certificate it issues. Your S3 bucket policy must
// give write permission to Amazon Web Services Private CA.
//
// Amazon Web Services Private CA assets that are stored in Amazon S3 can be
// protected with encryption. For more information, see Encrypting Your CRLs
// (https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#crl-encryption).
//
// Your private CA uses the value in the ExpirationInDays parameter to calculate
// the nextUpdate field in the CRL. The CRL is refreshed prior to a certificate's
// expiration date or when a certificate is revoked. When a certificate is revoked,
// it appears in the CRL until the certificate expires, and then in one additional
// CRL after expiration, and it always appears in the audit report.
//
// A CRL is typically updated approximately 30 minutes after a certificate is
// revoked. If for any reason a CRL update fails, Amazon Web Services Private
// CA makes further attempts every 15 minutes.
//
// CRLs contain the following fields:
//
//   - Version: The current version number defined in RFC 5280 is V2. The integer
//     value is 0x1.
//
//   - Signature Algorithm: The name of the algorithm used to sign the CRL.
//
//   - Issuer: The X.500 distinguished name of your private CA that issued
//     the CRL.
//
//   - Last Update: The issue date and time of this CRL.
//
//   - Next Update: The day and time by which the next CRL will be issued.
//
//   - Revoked Certificates: List of revoked certificates. Each list item contains
//     the following information. Serial Number: The serial number, in hexadecimal
//     format, of the revoked certificate. Revocation Date: Date and time the
//     certificate was revoked. CRL Entry Extensions: Optional extensions for
//     the CRL entry. X509v3 CRL Reason Code: Reason the certificate was revoked.
//
//   - CRL Extensions: Optional extensions for the CRL. X509v3 Authority Key
//     Identifier: Identifies the public key associated with the private key
//     used to sign the certificate. X509v3 CRL Number:: Decimal sequence number
//     for the CRL.
//
//   - Signature Algorithm: Algorithm used by your private CA to sign the CRL.
//
//   - Signature Value: Signature computed over the CRL.
//
// Certificate revocation lists created by Amazon Web Services Private CA are
// DER-encoded. You can use the following OpenSSL command to list a CRL.
//
// openssl crl -inform DER -text -in crl_path -noout
//
// For more information, see Planning a certificate revocation list (CRL) (https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html)
// in the Amazon Web Services Private Certificate Authority User Guide
type CRLConfiguration struct {
	CustomCNAME      *string `json:"customCNAME,omitempty"`
	Enabled          *bool   `json:"enabled,omitempty"`
	ExpirationInDays *int64  `json:"expirationInDays,omitempty"`
	S3BucketName     *string `json:"s3BucketName,omitempty"`
	S3ObjectACL      *string `json:"s3ObjectACL,omitempty"`
}

// Describes the certificate extensions to be added to the certificate signing
// request (CSR).
type CSRExtensions struct {
	// Defines one or more purposes for which the key contained in the certificate
	// can be used. Default value for each option is false.
	KeyUsage                 *KeyUsage            `json:"keyUsage,omitempty"`
	SubjectInformationAccess []*AccessDescription `json:"subjectInformationAccess,omitempty"`
}

// Contains configuration information for your private certificate authority
// (CA). This includes information about the class of public key algorithm and
// the key pair that your private CA creates when it issues a certificate. It
// also includes the signature algorithm that it uses when issuing certificates,
// and its X.500 distinguished name. You must specify this information when
// you call the CreateCertificateAuthority (https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html)
// action.
type CertificateAuthorityConfiguration struct {
	// Describes the certificate extensions to be added to the certificate signing
	// request (CSR).
	CSRExtensions    *CSRExtensions `json:"csrExtensions,omitempty"`
	KeyAlgorithm     *string        `json:"keyAlgorithm,omitempty"`
	SigningAlgorithm *string        `json:"signingAlgorithm,omitempty"`
	// Contains information about the certificate subject. The Subject field in
	// the certificate identifies the entity that owns or controls the public key
	// in the certificate. The entity can be a user, computer, device, or service.
	// The Subject must contain an X.500 distinguished name (DN). A DN is a sequence
	// of relative distinguished names (RDNs). The RDNs are separated by commas
	// in the certificate.
	Subject *ASN1Subject `json:"subject,omitempty"`
}

// Contains information about your private certificate authority (CA). Your
// private CA can issue and revoke X.509 digital certificates. Digital certificates
// verify that the entity named in the certificate Subject field owns or controls
// the public key contained in the Subject Public Key Info field. Call the CreateCertificateAuthority
// (https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html)
// action to create your private CA. You must then call the GetCertificateAuthorityCertificate
// (https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificateAuthorityCertificate.html)
// action to retrieve a private CA certificate signing request (CSR). Sign the
// CSR with your Amazon Web Services Private CA-hosted or on-premises root or
// subordinate CA certificate. Call the ImportCertificateAuthorityCertificate
// (https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html)
// action to import the signed certificate into Certificate Manager (ACM).
type CertificateAuthority_SDK struct {
	ARN *string `json:"arn,omitempty"`
	// Contains configuration information for your private certificate authority
	// (CA). This includes information about the class of public key algorithm and
	// the key pair that your private CA creates when it issues a certificate. It
	// also includes the signature algorithm that it uses when issuing certificates,
	// and its X.500 distinguished name. You must specify this information when
	// you call the CreateCertificateAuthority (https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html)
	// action.
	CertificateAuthorityConfiguration *CertificateAuthorityConfiguration `json:"certificateAuthorityConfiguration,omitempty"`
	CreatedAt                         *metav1.Time                       `json:"createdAt,omitempty"`
	FailureReason                     *string                            `json:"failureReason,omitempty"`
	KeyStorageSecurityStandard        *string                            `json:"keyStorageSecurityStandard,omitempty"`
	LastStateChangeAt                 *metav1.Time                       `json:"lastStateChangeAt,omitempty"`
	NotAfter                          *metav1.Time                       `json:"notAfter,omitempty"`
	NotBefore                         *metav1.Time                       `json:"notBefore,omitempty"`
	OwnerAccount                      *string                            `json:"ownerAccount,omitempty"`
	RestorableUntil                   *metav1.Time                       `json:"restorableUntil,omitempty"`
	// Certificate revocation information used by the CreateCertificateAuthority
	// (https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html)
	// and UpdateCertificateAuthority (https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html)
	// actions. Your private certificate authority (CA) can configure Online Certificate
	// Status Protocol (OCSP) support and/or maintain a certificate revocation list
	// (CRL). OCSP returns validation information about certificates as requested
	// by clients, and a CRL contains an updated list of certificates revoked by
	// your CA. For more information, see RevokeCertificate (https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html)
	// and Setting up a certificate revocation method (https://docs.aws.amazon.com/privateca/latest/userguide/revocation-setup.html)
	// in the Amazon Web Services Private Certificate Authority User Guide.
	RevocationConfiguration *RevocationConfiguration `json:"revocationConfiguration,omitempty"`
	Serial                  *string                  `json:"serial,omitempty"`
	Status                  *string                  `json:"status,omitempty"`
	Type                    *string                  `json:"type_,omitempty"`
	UsageMode               *string                  `json:"usageMode,omitempty"`
}

// Defines the X.500 relative distinguished name (RDN).
type CustomAttribute struct {
	ObjectIdentifier *string `json:"objectIdentifier,omitempty"`
	Value            *string `json:"value,omitempty"`
}

// Specifies the X.509 extension information for a certificate.
//
// Extensions present in CustomExtensions follow the ApiPassthrough template
// rules (https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html#template-order-of-operations).
type CustomExtension struct {
	Critical         *bool   `json:"critical,omitempty"`
	ObjectIdentifier *string `json:"objectIdentifier,omitempty"`
	Value            *string `json:"value,omitempty"`
}

// Describes an Electronic Data Interchange (EDI) entity as described in as
// defined in Subject Alternative Name (https://datatracker.ietf.org/doc/html/rfc5280)
// in RFC 5280.
type EDIPartyName struct {
	NameAssigner *string `json:"nameAssigner,omitempty"`
	PartyName    *string `json:"partyName,omitempty"`
}

// Specifies additional purposes for which the certified public key may be used
// other than basic purposes indicated in the KeyUsage extension.
type ExtendedKeyUsage struct {
	ExtendedKeyUsageObjectIdentifier *string `json:"extendedKeyUsageObjectIdentifier,omitempty"`
	ExtendedKeyUsageType             *string `json:"extendedKeyUsageType,omitempty"`
}

// Contains X.509 extension information for a certificate.
type Extensions struct {
	CertificatePolicies []*PolicyInformation `json:"certificatePolicies,omitempty"`
	CustomExtensions    []*CustomExtension   `json:"customExtensions,omitempty"`
	ExtendedKeyUsage    []*ExtendedKeyUsage  `json:"extendedKeyUsage,omitempty"`
	// Defines one or more purposes for which the key contained in the certificate
	// can be used. Default value for each option is false.
	KeyUsage                *KeyUsage      `json:"keyUsage,omitempty"`
	SubjectAlternativeNames []*GeneralName `json:"subjectAlternativeNames,omitempty"`
}

// Describes an ASN.1 X.400 GeneralName as defined in RFC 5280 (https://datatracker.ietf.org/doc/html/rfc5280).
// Only one of the following naming options should be provided. Providing more
// than one option results in an InvalidArgsException error.
type GeneralName struct {
	// Contains information about the certificate subject. The Subject field in
	// the certificate identifies the entity that owns or controls the public key
	// in the certificate. The entity can be a user, computer, device, or service.
	// The Subject must contain an X.500 distinguished name (DN). A DN is a sequence
	// of relative distinguished names (RDNs). The RDNs are separated by commas
	// in the certificate.
	DirectoryName *ASN1Subject `json:"directoryName,omitempty"`
	DNSName       *string      `json:"dnsName,omitempty"`
	// Describes an Electronic Data Interchange (EDI) entity as described in as
	// defined in Subject Alternative Name (https://datatracker.ietf.org/doc/html/rfc5280)
	// in RFC 5280.
	EDIPartyName *EDIPartyName `json:"ediPartyName,omitempty"`
	IPAddress    *string       `json:"ipAddress,omitempty"`
	// Defines a custom ASN.1 X.400 GeneralName using an object identifier (OID)
	// and value. The OID must satisfy the regular expression shown below. For more
	// information, see NIST's definition of Object Identifier (OID) (https://csrc.nist.gov/glossary/term/Object_Identifier).
	OtherName                 *OtherName `json:"otherName,omitempty"`
	RegisteredID              *string    `json:"registeredID,omitempty"`
	RFC822Name                *string    `json:"rfc822Name,omitempty"`
	UniformResourceIdentifier *string    `json:"uniformResourceIdentifier,omitempty"`
}

// Defines one or more purposes for which the key contained in the certificate
// can be used. Default value for each option is false.
type KeyUsage struct {
	CRLSign          *bool `json:"crlSign,omitempty"`
	DataEncipherment *bool `json:"dataEncipherment,omitempty"`
	DecipherOnly     *bool `json:"decipherOnly,omitempty"`
	DigitalSignature *bool `json:"digitalSignature,omitempty"`
	EncipherOnly     *bool `json:"encipherOnly,omitempty"`
	KeyAgreement     *bool `json:"keyAgreement,omitempty"`
	KeyCertSign      *bool `json:"keyCertSign,omitempty"`
	KeyEncipherment  *bool `json:"keyEncipherment,omitempty"`
	NonRepudiation   *bool `json:"nonRepudiation,omitempty"`
}

// Contains information to enable and configure Online Certificate Status Protocol
// (OCSP) for validating certificate revocation status.
//
// When you revoke a certificate, OCSP responses may take up to 60 minutes to
// reflect the new status.
type OCSPConfiguration struct {
	Enabled         *bool   `json:"enabled,omitempty"`
	OCSPCustomCNAME *string `json:"ocspCustomCNAME,omitempty"`
}

// Defines a custom ASN.1 X.400 GeneralName using an object identifier (OID)
// and value. The OID must satisfy the regular expression shown below. For more
// information, see NIST's definition of Object Identifier (OID) (https://csrc.nist.gov/glossary/term/Object_Identifier).
type OtherName struct {
	TypeID *string `json:"typeID,omitempty"`
	Value  *string `json:"value,omitempty"`
}

// Permissions designate which private CA actions can be performed by an Amazon
// Web Services service or entity. In order for ACM to automatically renew private
// certificates, you must give the ACM service principal all available permissions
// (IssueCertificate, GetCertificate, and ListPermissions). Permissions can
// be assigned with the CreatePermission (https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreatePermission.html)
// action, removed with the DeletePermission (https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePermission.html)
// action, and listed with the ListPermissions (https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListPermissions.html)
// action.
type Permission struct {
	CertificateAuthorityARN *string      `json:"certificateAuthorityARN,omitempty"`
	CreatedAt               *metav1.Time `json:"createdAt,omitempty"`
	SourceAccount           *string      `json:"sourceAccount,omitempty"`
}

// Defines the X.509 CertificatePolicies extension.
type PolicyInformation struct {
	CertPolicyID     *string                `json:"certPolicyID,omitempty"`
	PolicyQualifiers []*PolicyQualifierInfo `json:"policyQualifiers,omitempty"`
}

// Modifies the CertPolicyId of a PolicyInformation object with a qualifier.
// Amazon Web Services Private CA supports the certification practice statement
// (CPS) qualifier.
type PolicyQualifierInfo struct {
	PolicyQualifierID *string `json:"policyQualifierID,omitempty"`
	// Defines a PolicyInformation qualifier. Amazon Web Services Private CA supports
	// the certification practice statement (CPS) qualifier (https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.4)
	// defined in RFC 5280.
	Qualifier *Qualifier `json:"qualifier,omitempty"`
}

// Defines a PolicyInformation qualifier. Amazon Web Services Private CA supports
// the certification practice statement (CPS) qualifier (https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.4)
// defined in RFC 5280.
type Qualifier struct {
	CPSURI *string `json:"cpsURI,omitempty"`
}

// Certificate revocation information used by the CreateCertificateAuthority
// (https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html)
// and UpdateCertificateAuthority (https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html)
// actions. Your private certificate authority (CA) can configure Online Certificate
// Status Protocol (OCSP) support and/or maintain a certificate revocation list
// (CRL). OCSP returns validation information about certificates as requested
// by clients, and a CRL contains an updated list of certificates revoked by
// your CA. For more information, see RevokeCertificate (https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html)
// and Setting up a certificate revocation method (https://docs.aws.amazon.com/privateca/latest/userguide/revocation-setup.html)
// in the Amazon Web Services Private Certificate Authority User Guide.
type RevocationConfiguration struct {
	// Contains configuration information for a certificate revocation list (CRL).
	// Your private certificate authority (CA) creates base CRLs. Delta CRLs are
	// not supported. You can enable CRLs for your new or an existing private CA
	// by setting the Enabled parameter to true. Your private CA writes CRLs to
	// an S3 bucket that you specify in the S3BucketName parameter. You can hide
	// the name of your bucket by specifying a value for the CustomCname parameter.
	// Your private CA copies the CNAME or the S3 bucket name to the CRL Distribution
	// Points extension of each certificate it issues. Your S3 bucket policy must
	// give write permission to Amazon Web Services Private CA.
	//
	// Amazon Web Services Private CA assets that are stored in Amazon S3 can be
	// protected with encryption. For more information, see Encrypting Your CRLs
	// (https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#crl-encryption).
	//
	// Your private CA uses the value in the ExpirationInDays parameter to calculate
	// the nextUpdate field in the CRL. The CRL is refreshed prior to a certificate's
	// expiration date or when a certificate is revoked. When a certificate is revoked,
	// it appears in the CRL until the certificate expires, and then in one additional
	// CRL after expiration, and it always appears in the audit report.
	//
	// A CRL is typically updated approximately 30 minutes after a certificate is
	// revoked. If for any reason a CRL update fails, Amazon Web Services Private
	// CA makes further attempts every 15 minutes.
	//
	// CRLs contain the following fields:
	//
	//    * Version: The current version number defined in RFC 5280 is V2. The integer
	//    value is 0x1.
	//
	//    * Signature Algorithm: The name of the algorithm used to sign the CRL.
	//
	//    * Issuer: The X.500 distinguished name of your private CA that issued
	//    the CRL.
	//
	//    * Last Update: The issue date and time of this CRL.
	//
	//    * Next Update: The day and time by which the next CRL will be issued.
	//
	//    * Revoked Certificates: List of revoked certificates. Each list item contains
	//    the following information. Serial Number: The serial number, in hexadecimal
	//    format, of the revoked certificate. Revocation Date: Date and time the
	//    certificate was revoked. CRL Entry Extensions: Optional extensions for
	//    the CRL entry. X509v3 CRL Reason Code: Reason the certificate was revoked.
	//
	//    * CRL Extensions: Optional extensions for the CRL. X509v3 Authority Key
	//    Identifier: Identifies the public key associated with the private key
	//    used to sign the certificate. X509v3 CRL Number:: Decimal sequence number
	//    for the CRL.
	//
	//    * Signature Algorithm: Algorithm used by your private CA to sign the CRL.
	//
	//    * Signature Value: Signature computed over the CRL.
	//
	// Certificate revocation lists created by Amazon Web Services Private CA are
	// DER-encoded. You can use the following OpenSSL command to list a CRL.
	//
	// openssl crl -inform DER -text -in crl_path -noout
	//
	// For more information, see Planning a certificate revocation list (CRL) (https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html)
	// in the Amazon Web Services Private Certificate Authority User Guide
	CRLConfiguration *CRLConfiguration `json:"crlConfiguration,omitempty"`
	// Contains information to enable and configure Online Certificate Status Protocol
	// (OCSP) for validating certificate revocation status.
	//
	// When you revoke a certificate, OCSP responses may take up to 60 minutes to
	// reflect the new status.
	OCSPConfiguration *OCSPConfiguration `json:"ocspConfiguration,omitempty"`
}

// Tags are labels that you can use to identify and organize your private CAs.
// Each tag consists of a key and an optional value. You can associate up to
// 50 tags with a private CA. To add one or more tags to a private CA, call
// the TagCertificateAuthority (https://docs.aws.amazon.com/privateca/latest/APIReference/API_TagCertificateAuthority.html)
// action. To remove a tag, call the UntagCertificateAuthority (https://docs.aws.amazon.com/privateca/latest/APIReference/API_UntagCertificateAuthority.html)
// action.
type Tag struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// Validity specifies the period of time during which a certificate is valid.
// Validity can be expressed as an explicit date and time when the validity
// of a certificate starts or expires, or as a span of time after issuance,
// stated in days, months, or years. For more information, see Validity (https://tools.ietf.org/html/rfc5280#section-4.1.2.5)
// in RFC 5280.
//
// Amazon Web Services Private CA API consumes the Validity data type differently
// in two distinct parameters of the IssueCertificate action. The required parameter
// IssueCertificate:Validity specifies the end of a certificate's validity period.
// The optional parameter IssueCertificate:ValidityNotBefore specifies a customized
// starting time for the validity period.
type Validity struct {
	Type  *string `json:"type,omitempty"`
	Value *int64  `json:"value,omitempty"`
}
