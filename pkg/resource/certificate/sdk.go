// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package certificate

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/acmpca"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/acmpca/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/acmpca-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Certificate{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If the certificate is marked for deletion, we will skip
	// calling GetCertificate and Writing the secret as these
	// can lead to terminal errors and unsuccessful deletion
	// in the case where the dependent secret or CA are deleted
	// first
	if r.ko.ObjectMeta.DeletionTimestamp != nil {
		return r, nil
	}

	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetCertificateOutput
	resp, err = rm.sdkapi.GetCertificate(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetCertificate", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	rm.setStatusDefaults(ko)
	err = rm.writeCertificateToSecret(ctx, *resp.Certificate, r.ko.GetNamespace(), r.ko.Spec.CertificateOutput)
	if err != nil && strings.HasPrefix(err.Error(), "RequestInProgressException") {
		return &resource{ko}, ackrequeue.NeededAfter(err, ackrequeue.DefaultRequeueAfterDuration)
	}
	if err != nil {
		return nil, err
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return (r.ko.Status.ACKResourceMetadata == nil || r.ko.Status.ACKResourceMetadata.ARN == nil) || r.ko.Spec.CertificateAuthorityARN == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetCertificateInput, error) {
	res := &svcsdk.GetCertificateInput{}

	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.CertificateArn = (*string)(r.ko.Status.ACKResourceMetadata.ARN)
	}
	if r.ko.Spec.CertificateAuthorityARN != nil {
		res.CertificateAuthorityArn = r.ko.Spec.CertificateAuthorityARN
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	if desired.ko.Spec.CertificateSigningRequest != nil {
		input.Csr = []byte(*desired.ko.Spec.CertificateSigningRequest)
	}
	input.IdempotencyToken = aws.String(string(desired.ko.ObjectMeta.UID))

	var resp *svcsdk.IssueCertificateOutput
	_ = resp
	resp, err = rm.sdkapi.IssueCertificate(ctx, input)
	if err != nil {
		input := &svcsdk.DescribeCertificateAuthorityInput{}
		input.CertificateAuthorityArn = desired.ko.Spec.CertificateAuthorityARN

		var describeResp *svcsdk.DescribeCertificateAuthorityOutput
		describeResp, describeErr := rm.sdkapi.DescribeCertificateAuthority(ctx, input)
		rm.metrics.RecordAPICall("READ_ONE", "DescribeCertificateAuthority", err)
		if describeErr != nil {
			return desired, ackrequeue.NeededAfter(describeErr, ackrequeue.DefaultRequeueAfterDuration)
		}

		if describeResp.CertificateAuthority.Status != svcsdktypes.CertificateAuthorityStatusFailed && describeResp.CertificateAuthority.Status != svcsdktypes.CertificateAuthorityStatusDeleted && describeResp.CertificateAuthority.Status != svcsdktypes.CertificateAuthorityStatusDisabled {
			return desired, ackrequeue.NeededAfter(err, ackrequeue.DefaultRequeueAfterDuration)
		}

		return nil, err
	}
	rm.metrics.RecordAPICall("CREATE", "IssueCertificate", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.CertificateArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.CertificateArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.IssueCertificateInput, error) {
	res := &svcsdk.IssueCertificateInput{}

	if r.ko.Spec.APIPassthrough != nil {
		f0 := &svcsdktypes.ApiPassthrough{}
		if r.ko.Spec.APIPassthrough.Extensions != nil {
			f0f0 := &svcsdktypes.Extensions{}
			if r.ko.Spec.APIPassthrough.Extensions.CertificatePolicies != nil {
				f0f0f0 := []svcsdktypes.PolicyInformation{}
				for _, f0f0f0iter := range r.ko.Spec.APIPassthrough.Extensions.CertificatePolicies {
					f0f0f0elem := &svcsdktypes.PolicyInformation{}
					if f0f0f0iter.CertPolicyID != nil {
						f0f0f0elem.CertPolicyId = f0f0f0iter.CertPolicyID
					}
					if f0f0f0iter.PolicyQualifiers != nil {
						f0f0f0elemf1 := []svcsdktypes.PolicyQualifierInfo{}
						for _, f0f0f0elemf1iter := range f0f0f0iter.PolicyQualifiers {
							f0f0f0elemf1elem := &svcsdktypes.PolicyQualifierInfo{}
							if f0f0f0elemf1iter.PolicyQualifierID != nil {
								f0f0f0elemf1elem.PolicyQualifierId = svcsdktypes.PolicyQualifierId(*f0f0f0elemf1iter.PolicyQualifierID)
							}
							if f0f0f0elemf1iter.Qualifier != nil {
								f0f0f0elemf1elemf1 := &svcsdktypes.Qualifier{}
								if f0f0f0elemf1iter.Qualifier.CPSURI != nil {
									f0f0f0elemf1elemf1.CpsUri = f0f0f0elemf1iter.Qualifier.CPSURI
								}
								f0f0f0elemf1elem.Qualifier = f0f0f0elemf1elemf1
							}
							f0f0f0elemf1 = append(f0f0f0elemf1, *f0f0f0elemf1elem)
						}
						f0f0f0elem.PolicyQualifiers = f0f0f0elemf1
					}
					f0f0f0 = append(f0f0f0, *f0f0f0elem)
				}
				f0f0.CertificatePolicies = f0f0f0
			}
			if r.ko.Spec.APIPassthrough.Extensions.CustomExtensions != nil {
				f0f0f1 := []svcsdktypes.CustomExtension{}
				for _, f0f0f1iter := range r.ko.Spec.APIPassthrough.Extensions.CustomExtensions {
					f0f0f1elem := &svcsdktypes.CustomExtension{}
					if f0f0f1iter.Critical != nil {
						f0f0f1elem.Critical = f0f0f1iter.Critical
					}
					if f0f0f1iter.ObjectIdentifier != nil {
						f0f0f1elem.ObjectIdentifier = f0f0f1iter.ObjectIdentifier
					}
					if f0f0f1iter.Value != nil {
						f0f0f1elem.Value = f0f0f1iter.Value
					}
					f0f0f1 = append(f0f0f1, *f0f0f1elem)
				}
				f0f0.CustomExtensions = f0f0f1
			}
			if r.ko.Spec.APIPassthrough.Extensions.ExtendedKeyUsage != nil {
				f0f0f2 := []svcsdktypes.ExtendedKeyUsage{}
				for _, f0f0f2iter := range r.ko.Spec.APIPassthrough.Extensions.ExtendedKeyUsage {
					f0f0f2elem := &svcsdktypes.ExtendedKeyUsage{}
					if f0f0f2iter.ExtendedKeyUsageObjectIdentifier != nil {
						f0f0f2elem.ExtendedKeyUsageObjectIdentifier = f0f0f2iter.ExtendedKeyUsageObjectIdentifier
					}
					if f0f0f2iter.ExtendedKeyUsageType != nil {
						f0f0f2elem.ExtendedKeyUsageType = svcsdktypes.ExtendedKeyUsageType(*f0f0f2iter.ExtendedKeyUsageType)
					}
					f0f0f2 = append(f0f0f2, *f0f0f2elem)
				}
				f0f0.ExtendedKeyUsage = f0f0f2
			}
			if r.ko.Spec.APIPassthrough.Extensions.KeyUsage != nil {
				f0f0f3 := &svcsdktypes.KeyUsage{}
				if r.ko.Spec.APIPassthrough.Extensions.KeyUsage.CRLSign != nil {
					f0f0f3.CRLSign = *r.ko.Spec.APIPassthrough.Extensions.KeyUsage.CRLSign
				}
				if r.ko.Spec.APIPassthrough.Extensions.KeyUsage.DataEncipherment != nil {
					f0f0f3.DataEncipherment = *r.ko.Spec.APIPassthrough.Extensions.KeyUsage.DataEncipherment
				}
				if r.ko.Spec.APIPassthrough.Extensions.KeyUsage.DecipherOnly != nil {
					f0f0f3.DecipherOnly = *r.ko.Spec.APIPassthrough.Extensions.KeyUsage.DecipherOnly
				}
				if r.ko.Spec.APIPassthrough.Extensions.KeyUsage.DigitalSignature != nil {
					f0f0f3.DigitalSignature = *r.ko.Spec.APIPassthrough.Extensions.KeyUsage.DigitalSignature
				}
				if r.ko.Spec.APIPassthrough.Extensions.KeyUsage.EncipherOnly != nil {
					f0f0f3.EncipherOnly = *r.ko.Spec.APIPassthrough.Extensions.KeyUsage.EncipherOnly
				}
				if r.ko.Spec.APIPassthrough.Extensions.KeyUsage.KeyAgreement != nil {
					f0f0f3.KeyAgreement = *r.ko.Spec.APIPassthrough.Extensions.KeyUsage.KeyAgreement
				}
				if r.ko.Spec.APIPassthrough.Extensions.KeyUsage.KeyCertSign != nil {
					f0f0f3.KeyCertSign = *r.ko.Spec.APIPassthrough.Extensions.KeyUsage.KeyCertSign
				}
				if r.ko.Spec.APIPassthrough.Extensions.KeyUsage.KeyEncipherment != nil {
					f0f0f3.KeyEncipherment = *r.ko.Spec.APIPassthrough.Extensions.KeyUsage.KeyEncipherment
				}
				if r.ko.Spec.APIPassthrough.Extensions.KeyUsage.NonRepudiation != nil {
					f0f0f3.NonRepudiation = *r.ko.Spec.APIPassthrough.Extensions.KeyUsage.NonRepudiation
				}
				f0f0.KeyUsage = f0f0f3
			}
			if r.ko.Spec.APIPassthrough.Extensions.SubjectAlternativeNames != nil {
				f0f0f4 := []svcsdktypes.GeneralName{}
				for _, f0f0f4iter := range r.ko.Spec.APIPassthrough.Extensions.SubjectAlternativeNames {
					f0f0f4elem := &svcsdktypes.GeneralName{}
					if f0f0f4iter.DirectoryName != nil {
						f0f0f4elemf0 := &svcsdktypes.ASN1Subject{}
						if f0f0f4iter.DirectoryName.CommonName != nil {
							f0f0f4elemf0.CommonName = f0f0f4iter.DirectoryName.CommonName
						}
						if f0f0f4iter.DirectoryName.Country != nil {
							f0f0f4elemf0.Country = f0f0f4iter.DirectoryName.Country
						}
						if f0f0f4iter.DirectoryName.CustomAttributes != nil {
							f0f0f4elemf0f2 := []svcsdktypes.CustomAttribute{}
							for _, f0f0f4elemf0f2iter := range f0f0f4iter.DirectoryName.CustomAttributes {
								f0f0f4elemf0f2elem := &svcsdktypes.CustomAttribute{}
								if f0f0f4elemf0f2iter.ObjectIdentifier != nil {
									f0f0f4elemf0f2elem.ObjectIdentifier = f0f0f4elemf0f2iter.ObjectIdentifier
								}
								if f0f0f4elemf0f2iter.Value != nil {
									f0f0f4elemf0f2elem.Value = f0f0f4elemf0f2iter.Value
								}
								f0f0f4elemf0f2 = append(f0f0f4elemf0f2, *f0f0f4elemf0f2elem)
							}
							f0f0f4elemf0.CustomAttributes = f0f0f4elemf0f2
						}
						if f0f0f4iter.DirectoryName.DistinguishedNameQualifier != nil {
							f0f0f4elemf0.DistinguishedNameQualifier = f0f0f4iter.DirectoryName.DistinguishedNameQualifier
						}
						if f0f0f4iter.DirectoryName.GenerationQualifier != nil {
							f0f0f4elemf0.GenerationQualifier = f0f0f4iter.DirectoryName.GenerationQualifier
						}
						if f0f0f4iter.DirectoryName.GivenName != nil {
							f0f0f4elemf0.GivenName = f0f0f4iter.DirectoryName.GivenName
						}
						if f0f0f4iter.DirectoryName.Initials != nil {
							f0f0f4elemf0.Initials = f0f0f4iter.DirectoryName.Initials
						}
						if f0f0f4iter.DirectoryName.Locality != nil {
							f0f0f4elemf0.Locality = f0f0f4iter.DirectoryName.Locality
						}
						if f0f0f4iter.DirectoryName.Organization != nil {
							f0f0f4elemf0.Organization = f0f0f4iter.DirectoryName.Organization
						}
						if f0f0f4iter.DirectoryName.OrganizationalUnit != nil {
							f0f0f4elemf0.OrganizationalUnit = f0f0f4iter.DirectoryName.OrganizationalUnit
						}
						if f0f0f4iter.DirectoryName.Pseudonym != nil {
							f0f0f4elemf0.Pseudonym = f0f0f4iter.DirectoryName.Pseudonym
						}
						if f0f0f4iter.DirectoryName.SerialNumber != nil {
							f0f0f4elemf0.SerialNumber = f0f0f4iter.DirectoryName.SerialNumber
						}
						if f0f0f4iter.DirectoryName.State != nil {
							f0f0f4elemf0.State = f0f0f4iter.DirectoryName.State
						}
						if f0f0f4iter.DirectoryName.Surname != nil {
							f0f0f4elemf0.Surname = f0f0f4iter.DirectoryName.Surname
						}
						if f0f0f4iter.DirectoryName.Title != nil {
							f0f0f4elemf0.Title = f0f0f4iter.DirectoryName.Title
						}
						f0f0f4elem.DirectoryName = f0f0f4elemf0
					}
					if f0f0f4iter.DNSName != nil {
						f0f0f4elem.DnsName = f0f0f4iter.DNSName
					}
					if f0f0f4iter.EDIPartyName != nil {
						f0f0f4elemf2 := &svcsdktypes.EdiPartyName{}
						if f0f0f4iter.EDIPartyName.NameAssigner != nil {
							f0f0f4elemf2.NameAssigner = f0f0f4iter.EDIPartyName.NameAssigner
						}
						if f0f0f4iter.EDIPartyName.PartyName != nil {
							f0f0f4elemf2.PartyName = f0f0f4iter.EDIPartyName.PartyName
						}
						f0f0f4elem.EdiPartyName = f0f0f4elemf2
					}
					if f0f0f4iter.IPAddress != nil {
						f0f0f4elem.IpAddress = f0f0f4iter.IPAddress
					}
					if f0f0f4iter.OtherName != nil {
						f0f0f4elemf4 := &svcsdktypes.OtherName{}
						if f0f0f4iter.OtherName.TypeID != nil {
							f0f0f4elemf4.TypeId = f0f0f4iter.OtherName.TypeID
						}
						if f0f0f4iter.OtherName.Value != nil {
							f0f0f4elemf4.Value = f0f0f4iter.OtherName.Value
						}
						f0f0f4elem.OtherName = f0f0f4elemf4
					}
					if f0f0f4iter.RegisteredID != nil {
						f0f0f4elem.RegisteredId = f0f0f4iter.RegisteredID
					}
					if f0f0f4iter.RFC822Name != nil {
						f0f0f4elem.Rfc822Name = f0f0f4iter.RFC822Name
					}
					if f0f0f4iter.UniformResourceIdentifier != nil {
						f0f0f4elem.UniformResourceIdentifier = f0f0f4iter.UniformResourceIdentifier
					}
					f0f0f4 = append(f0f0f4, *f0f0f4elem)
				}
				f0f0.SubjectAlternativeNames = f0f0f4
			}
			f0.Extensions = f0f0
		}
		if r.ko.Spec.APIPassthrough.Subject != nil {
			f0f1 := &svcsdktypes.ASN1Subject{}
			if r.ko.Spec.APIPassthrough.Subject.CommonName != nil {
				f0f1.CommonName = r.ko.Spec.APIPassthrough.Subject.CommonName
			}
			if r.ko.Spec.APIPassthrough.Subject.Country != nil {
				f0f1.Country = r.ko.Spec.APIPassthrough.Subject.Country
			}
			if r.ko.Spec.APIPassthrough.Subject.CustomAttributes != nil {
				f0f1f2 := []svcsdktypes.CustomAttribute{}
				for _, f0f1f2iter := range r.ko.Spec.APIPassthrough.Subject.CustomAttributes {
					f0f1f2elem := &svcsdktypes.CustomAttribute{}
					if f0f1f2iter.ObjectIdentifier != nil {
						f0f1f2elem.ObjectIdentifier = f0f1f2iter.ObjectIdentifier
					}
					if f0f1f2iter.Value != nil {
						f0f1f2elem.Value = f0f1f2iter.Value
					}
					f0f1f2 = append(f0f1f2, *f0f1f2elem)
				}
				f0f1.CustomAttributes = f0f1f2
			}
			if r.ko.Spec.APIPassthrough.Subject.DistinguishedNameQualifier != nil {
				f0f1.DistinguishedNameQualifier = r.ko.Spec.APIPassthrough.Subject.DistinguishedNameQualifier
			}
			if r.ko.Spec.APIPassthrough.Subject.GenerationQualifier != nil {
				f0f1.GenerationQualifier = r.ko.Spec.APIPassthrough.Subject.GenerationQualifier
			}
			if r.ko.Spec.APIPassthrough.Subject.GivenName != nil {
				f0f1.GivenName = r.ko.Spec.APIPassthrough.Subject.GivenName
			}
			if r.ko.Spec.APIPassthrough.Subject.Initials != nil {
				f0f1.Initials = r.ko.Spec.APIPassthrough.Subject.Initials
			}
			if r.ko.Spec.APIPassthrough.Subject.Locality != nil {
				f0f1.Locality = r.ko.Spec.APIPassthrough.Subject.Locality
			}
			if r.ko.Spec.APIPassthrough.Subject.Organization != nil {
				f0f1.Organization = r.ko.Spec.APIPassthrough.Subject.Organization
			}
			if r.ko.Spec.APIPassthrough.Subject.OrganizationalUnit != nil {
				f0f1.OrganizationalUnit = r.ko.Spec.APIPassthrough.Subject.OrganizationalUnit
			}
			if r.ko.Spec.APIPassthrough.Subject.Pseudonym != nil {
				f0f1.Pseudonym = r.ko.Spec.APIPassthrough.Subject.Pseudonym
			}
			if r.ko.Spec.APIPassthrough.Subject.SerialNumber != nil {
				f0f1.SerialNumber = r.ko.Spec.APIPassthrough.Subject.SerialNumber
			}
			if r.ko.Spec.APIPassthrough.Subject.State != nil {
				f0f1.State = r.ko.Spec.APIPassthrough.Subject.State
			}
			if r.ko.Spec.APIPassthrough.Subject.Surname != nil {
				f0f1.Surname = r.ko.Spec.APIPassthrough.Subject.Surname
			}
			if r.ko.Spec.APIPassthrough.Subject.Title != nil {
				f0f1.Title = r.ko.Spec.APIPassthrough.Subject.Title
			}
			f0.Subject = f0f1
		}
		res.ApiPassthrough = f0
	}
	if r.ko.Spec.CertificateAuthorityARN != nil {
		res.CertificateAuthorityArn = r.ko.Spec.CertificateAuthorityARN
	}
	if r.ko.Spec.SigningAlgorithm != nil {
		res.SigningAlgorithm = svcsdktypes.SigningAlgorithm(*r.ko.Spec.SigningAlgorithm)
	}
	if r.ko.Spec.TemplateARN != nil {
		res.TemplateArn = r.ko.Spec.TemplateARN
	}
	if r.ko.Spec.Validity != nil {
		f4 := &svcsdktypes.Validity{}
		if r.ko.Spec.Validity.Type != nil {
			f4.Type = svcsdktypes.ValidityPeriodType(*r.ko.Spec.Validity.Type)
		}
		if r.ko.Spec.Validity.Value != nil {
			f4.Value = r.ko.Spec.Validity.Value
		}
		res.Validity = f4
	}
	if r.ko.Spec.ValidityNotBefore != nil {
		f5 := &svcsdktypes.Validity{}
		if r.ko.Spec.ValidityNotBefore.Type != nil {
			f5.Type = svcsdktypes.ValidityPeriodType(*r.ko.Spec.ValidityNotBefore.Type)
		}
		if r.ko.Spec.ValidityNotBefore.Value != nil {
			f5.Value = r.ko.Spec.ValidityNotBefore.Value
		}
		res.ValidityNotBefore = f5
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return nil, ackerr.NewTerminalError(ackerr.NotImplemented)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	// TODO(jaypipes): Figure this out...
	return nil, nil

}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Certificate,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidAction",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"InvalidQueryParameter",
		"MissingParameter",
		"ValidationError",
		"ValidationException",
		"InvalidArgsException",
		"InvalidArnException",
		"LimitExceededException",
		"MalformedCSRException":
		return true
	default:
		return false
	}
}
